// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PolyglotToolVer2.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using PolyglotToolVer2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/_Imports.razor"
using PolyglotToolVer2.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
using PolyglotToolVer2.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/elta")]
    public partial class Elta : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 83 "/Users/arisskamagakis/Projects/PolyglotToolVer2/PolyglotToolVer2/Pages/Elta.razor"
 
    CultureInfo culInfo = new CultureInfo("el-GR");
    bool showUpdateButton = false;
    bool disableUploadButton = false;
    bool showProgress = false;
    private List<PolyglotToolVer2.Data.Models.eltaList> Elements = new List<PolyglotToolVer2.Data.Models.eltaList>();
    public int Progress { get; set; }
    public int ProgressMax { get; set; }
    private bool visible = false;
    DateTime? paymentDate = DateTime.Today;
    private bool wait2getDate = true;
    protected override void OnInitialized()
    {
    }


    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        showUpdateButton = false;
        Elements.Clear();
        var entries = e.GetMultipleFiles();
        //Do your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        IBrowserFile fileName = entries.FirstOrDefault();
        var buffers = new byte[fileName.Size];
        await fileName.OpenReadStream().ReadAsync(buffers);

        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
        string result = System.Text.Encoding.GetEncoding(1253).GetString(buffers);
        string[] lines = result.ToString().Split("\n");

        foreach (string line in lines)
        {
            string[] lineDetails = line.Split(";");
            if (lineDetails.Count() >= 4)
            {
                PolyglotToolVer2.Data.Models.eltaList list = new PolyglotToolVer2.Data.Models.eltaList();
                list.voucher = lineDetails[0].ToString();
                list.name = lineDetails[3].ToString();
                double amount = 0;
                string amountStr = lineDetails[1].ToString();
                double.TryParse(amountStr, NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out amount);
                list.amount = amount;
                list.date = lineDetails[2].ToString();
                list.updated = false;
                Elements.Add(list);
            }
        }
        showUpdateButton = true;
        StateHasChanged();
        Snackbar.Add($"Το αρχείο {fileName.Name} έχει φορτωθεί");

    }

    private void clearScreen()
    {
        Elements.Clear();
        showUpdateButton = false;
        disableUploadButton = false;
        showProgress = false;
    }

    private async void insertPayments()
    {
        if (Elements.Count == 0)
        {
            return;
        }
        disableUploadButton = true;
        showUpdateButton = false;
        showProgress = true;
        wait2getDate = false;
        GetDate();
        while (!wait2getDate)
        {
            await Task.Delay(250); // pause for 1/4 second;
        };

        Snackbar.Add($"Ημερομηνία πληρωμής {paymentDate?.ToString("dd-MM-yyyy")}");
        ProgressMax = Elements.Count;
        Progress = Elements.Count;
        bool copleteNormal = true;
        for (int i = 0; i < Elements.Count; i++)
        {
            string voucher = Elements[i].voucher;
            double amount = Elements[i].amount;
            DateTime documentDate = DateTime.ParseExact(Elements[i].date, "d/M/yyyy", CultureInfo.InvariantCulture);
            Tuple<bool, string> writeResult = updatePayment2Prisma(voucher, amount, documentDate);
            if (!writeResult.Item1) copleteNormal = false;
            Elements[i].updated = writeResult.Item1;
            Elements[i].result = writeResult.Item2;
            Progress = i + 1;
            StateHasChanged();
        }
        disableUploadButton = false;
        showProgress = false;
        if (copleteNormal)
        {
            Snackbar.Add("Ολοκληρώθηκε η ενημέρωση των πληρωμών");
        }
        else
        {
            Snackbar.Add("Ολοκληρώθηκε η ενημέρωση των πληρωμών\nΠροσοχή υπάρχουν λάθη");
        }
        StateHasChanged();
    }

    private Tuple<bool, string> updatePayment2Prisma(string voucher, double amount, DateTime documentDate)
    {
        //Console.Write("\nstart Tuple");
        Tuple<bool, string> result = new Tuple<bool, string>(false, null);
        string year = documentDate.ToString("yyyy");
        string query;
        string fiscalId = findFiscalID(year);
        string emp016 = $"E1_Emp016_{fiscalId}";
        string emp016ForWrite = emp016;
        if (paymentDate?.ToString("yyyy") != year)
        {
            fiscalId = findFiscalID(paymentDate?.ToString("yyyy"));
            emp016ForWrite = $"E1_Emp016_{fiscalId}";
        }
        //Ψάχνουμε για το παραστατικό
        query = $"select a.kwd,a.parat3,a.PerPel,a.SynTeliko,a.arpar,b.arpar ArParApod,a.kwdPel,a.PerPel,a.AfmPel,a.CityPel,a.AddressPel,a.ZipPel,a.KwdEpagPel,a.PerEpagPel,a.DoyPel,a.TelPel,a.Kepyo,a.Proorismos,a.kwdPar from {emp016} as a left join (select * from {emp016ForWrite} where eidostimologhshs = 5 and parat3 = '{voucher}') as b on b.parat3 = a.parat3 where a.parat3 = '{voucher}'";
        DataTable table16 = sql.readTableFromSql(query);
        if (table16 == null || table16.Rows.Count == 0)
        {
            result = new Tuple<bool, string>(false, $"Το Voucher δεν βρέθηκε στα παραστατικά της χρήσης {year}");
            Console.Write($"\nΤο Voucher δεν βρέθηκε στα παραστατικά της χρήσης {year}");
        }
        else
        {
            string kwdPel = table16.Rows[0]["kwdPel"].ToString();
            string PerPel = table16.Rows[0]["PerPel"].ToString();
            string AfmPel = table16.Rows[0]["AfmPel"].ToString();
            string CityPel = table16.Rows[0]["CityPel"].ToString();
            string AddressPel = table16.Rows[0]["AddressPel"].ToString();
            string ZipPel = table16.Rows[0]["ZipPel"].ToString();
            string KwdEpagPel = table16.Rows[0]["KwdEpagPel"].ToString();
            string PerEpagPel = table16.Rows[0]["PerEpagPel"].ToString();
            string DoyPel = table16.Rows[0]["DoyPel"].ToString();
            string TelPel = table16.Rows[0]["TelPel"].ToString();
            string Kepyo = table16.Rows[0]["Kepyo"].ToString();
            string Proorismos = table16.Rows[0]["Proorismos"].ToString();
            string kwdPar = table16.Rows[0]["kwdPar"].ToString();

            // Γράφουμε το παρασττικό
            if (table16.Rows.Count == 1)
            {
                double tempAmount = Convert.ToDouble(table16.Rows[0]["SynTeliko"].ToString());
                //Console.Write($"\namount={amount} = tempAmount={tempAmount}");
                if (table16.Rows[0]["ArParApod"] != null && !string.IsNullOrEmpty(table16.Rows[0]["ArParApod"].ToString()))
                {
                    result = new Tuple<bool, string>(false, $"Έχει κοπή απόδειξη No {table16.Rows[0]["ArParApod"].ToString()} για το Voucher {voucher} στην χρήση {paymentDate?.ToString("yyyy")}.");
                }
                else
                {
                    if (amount == tempAmount)
                    {
                        writeApod(emp016ForWrite, amount.ToString().Replace(",", "."), paymentDate?.ToString("yyyy-MM-dd"), voucher, kwdPel, PerPel, AfmPel, CityPel, AddressPel, ZipPel, KwdEpagPel, PerEpagPel, DoyPel, TelPel, Kepyo, Proorismos, kwdPar);
                        result = new Tuple<bool, string>(true, $"OK");
                    }
                    else
                    {
                        writeApod(emp016ForWrite, amount.ToString().Replace(",", "."), paymentDate?.ToString("yyyy-MM-dd"), voucher, kwdPel, PerPel, AfmPel, CityPel, AddressPel, ZipPel, KwdEpagPel, PerEpagPel, DoyPel, TelPel, Kepyo, Proorismos, kwdPar);
                        result = new Tuple<bool, string>(true, $"Υπάρχει διαφορά στα ποσά\nΠαραστατικό:{tempAmount.ToString()} ΕΛΤΑ: {amount.ToString()}");
                    }
                }
            }
            else
            {
                //Το Voucher Βρέθηκε σε πολλά παραστατικά.
                result = new Tuple<bool, string>(false, $"Το Voucher Βρέθηκε σε πολλά παραστατικά.");
            }
        }

        return result;
    }

    private void writeApod(string emp016ForWrite, string amount, string date, string voucher, string kwdPel, string PerPel, string AfmPel, string CityPel, string AddressPel, string ZipPel, string KwdEpagPel, string PerEpagPel, string DoyPel, string TelPel, string Kepyo, string Proorismos, string kwdPar)
    {

        string KwdTameiou = "05";
        string parat1 = "πελάτης Λιανικής ΕΛΤΑ";
        if (kwdPar == "1")
        {
            parat1 = "ΕΛΤΑ";
        }
        string query = $"Select isnull(Max(Kwd)+1,1) from {emp016ForWrite}";
        string kwd = sql.findField(query);
        query = $"Select isnull(Max(Arpar)+1,1) from {emp016ForWrite} where SeiraPar='ΕΛΤΑ'";
        string arpar = sql.findField(query);
        query = $"Insert into {emp016ForWrite} (synteliko,synoloForouEidwn,Apoqxoros,SecApoqXoros,kwdpoliti,promithiaPolEIS,promithiaPolETZ,checkpoint1,checkpoint2,nomisma,isotimia,kwdEndodiakinisis,kwdAkyrwmenou,kwdKinParagwghs,IdAxiografou,kwdTameiou,EisPlhr_Aksiografa,tritosKwd,TritosCompany, " +
                       "TritosAFM,TritosDOy,TritosAddr,TritosCity,tritosTK,TritosRecType,Logistikopoihsh,IdEispr,HfaistosFlag,AnoikthAxia,KwdKinEisagoghs,syntelikoks,EisPlhr_AksiografaKs,CancellationReason,EmpUserName,MyfExported,ArIsotimias,PrYpolKS,EkptoshNomKS, " +
                       "synEkptvshsKS,AxiaProEkptKS,AxiaMetaEkptKS,SynFPAKS,SynEpibKS,FPAEPIBKS,SynGenikoKS,SynoloForouEidwnKS,EksoflimenoPosoKS,PromithiaPolEiSKS,PromithiaPolETZKS,dapanesMhEkp,ApallaktikoFPA,kwd,IDPAR,KwdPar,PerigrafhPar,DatePar,TimePar,SeiraPar,ArPar,KwdPlhromis, " +
                       "PerPlhromis,Pel,Apo,PelProm,EidosTimologhshs,parat1,parat2,parat3,kwdPel,PerPel,AfmPel,CityPel,AddressPel,ZipPel,KwdEpagPel,PerEpagPel,DoyPel,TelPel,Kepyo,PrYpol,Proorismos) " +
                      $"Values({amount},0,'000','000','',0,0,0,0,'EURO',1,-1,-1,-1,-1,'{KwdTameiou}',0,'','','','','','','',0,0,-1,0,{amount},-1,0,0,'',1,0,'',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,{kwd}," +
                      $"18,900,'ΑΠΟΔΕΙΞΗ ΕΙΣΠΡΑΞΗΣ','{date}','1899-12-30 16:13:00.000','ΕΛΤΑ',{arpar},'','','-',0,1,5,'{parat1}','','{voucher}','{kwdPel}','{PerPel}','{AfmPel}','{CityPel}','{AddressPel}','{ZipPel}','{KwdEpagPel}','{PerEpagPel}','{DoyPel}','{TelPel}',{Kepyo},0,'{Proorismos}' )";
        sql.writeSQL(query);
        query = "INSERT INTO [dbo].[EltaPayments] ([amount] ,[date] ,[voucher] ,[kwdPel] ,[PerPel] ,[arpar] ,[printed],[parat1],[parat2],[parat3]) " +
               $"VALUES ('{amount}' ,'{date}' , '{voucher}', '{kwdPel}', '{PerPel}' ,'{arpar}', 0, '{parat1}','','{voucher}')";
        sql.writeSQL(query, "A2PaymentsDB");
    }

    void Change_EventArgs(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private string findFiscalID(string year)
    {
        string result = null;
        string query = $"Select id from emp998 where idEtairias = 1 and name = '{year}'";
        result = sql.findField(query);
        return result;
    }

    void Submit()
    {
        visible = false;
        wait2getDate = true;
    }

    private void GetDate()
    {
        visible = true;
    }

    private void PrintReceipt()
    {

    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private classSQL sql { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
    }
}
#pragma warning restore 1591
